from fastapi import UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from api.file_analyzer import FileAnalyzer
import stat
from api import app
import os
import logging

logging.basicConfig(filename='app.log', level=logging.DEBUG)
upload_dir = os.path.abspath('uploads')
if not os.path.exists(upload_dir):
    os.mkdir(upload_dir)
config = {
    'upload_dir': upload_dir,
    'timeout': 60
}

analyzer = FileAnalyzer(config)

@app.post("/analyze")
async def analyze_file(file: UploadFile = File(...)):
    try:
        logging.info("starting analysis")
        result = analyzer.analyze_file(file)
        return JSONResponse(content=result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# @app.post("/detonate")
# async def detonate_file(file: UploadFile = File(...)):
#     try:
#         logging.info("starting detonation")

#         with open(file.filename, "wb") as buffer:
#             buffer.write(await file.read())
#         result = analyzer.detonate_file(file.filename)
#         return JSONResponse(content=result)
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))


@app.post("/detonate")
async def detonate_file_api(file: UploadFile = File(...)):
    try:
        logging.info("starting detonation")
        file_path = os.path.join(analyzer.config['upload_dir'], file.filename)
          # Change the file permission to read, write, and execute for user only
        os.chmod(file.filename, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)
        with open(file_path, "wb") as buffer:
            buffer.write(await file.read())
        result = analyzer.detonate_file(file_path)
        return JSONResponse(content=result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
def read_root():
    return {"Hello": "World"}