import requests
from fastapi import UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from api.file_analyzer import FileAnalyzer
import stat
from api import app
import os
import logging
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient

logging.basicConfig(filename='app.log', level=logging.DEBUG)
upload_dir = os.path.abspath('uploads')
if not os.path.exists(upload_dir):
    os.mkdir(upload_dir)
config = {
    'upload_dir': upload_dir,
    'timeout': 60
}

analyzer = FileAnalyzer(config)


@app.post("/analyze")
async def analyze_file(file: UploadFile = File(...)):
    try:
        logging.info("starting analysis")
        result = analyzer.analyze_file(file)
        return JSONResponse(content=result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# @app.post("/detonate")
# async def detonate_file(file: UploadFile = File(...)):
#     try:
#         logging.info("starting detonation")

#         with open(file.filename, "wb") as buffer:
#             buffer.write(await file.read())
#         result = analyzer.detonate_file(file.filename)
#         return JSONResponse(content=result)
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))


@app.post("/detonate")
async def detonate_file_api(url: str):
    try:
        logging.info("starting detonation")
        logging.info("get file from the url")
        response = requests.get(url)
        filename = 'malware.sh'
        file_path = os.path.join(analyzer.config['upload_dir'], filename)
        with open(file_path, 'wb') as f:
            f.write(response.content)

        # Change the file permission to read, write, and execute for user only
        os.chmod(file_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)
        result = analyzer.detonate_file(file_path)
        return JSONResponse(content=result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/get_report_list")
async def get_report_list():
    account_url = "https://cs410032001efeadade.blob.core.windows.net"
    default_credential = DefaultAzureCredential()

    # Create the BlobServiceClient object
    blob_service_client = BlobServiceClient(account_url, credential=default_credential)

    container_name = "example"

    print("\nListing blobs...")
    # List the blobs in the container
    container_client = blob_service_client.get_container_client(container_name)
    blob_list = container_client.list_blobs()
    result = []

    for blob in blob_list:
        result.append(blob.name)
    return {'status': 'ok', 'result': result}


@app.get("/")
def read_root():
    return {"Hello": "World"}
