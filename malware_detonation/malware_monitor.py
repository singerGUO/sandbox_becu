#!/usr/bin/env python3
import boto3
import logging
import subprocess
import time
import os
import uuid
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
logger = logging.getLogger()
logger.setLevel(logging.INFO)

s3 = boto3.client("s3")


def upload_to_blob(local_path, local_file_name, container_name="example"):
    try:
        print("Upload file toAzure Blob Storage")

        # container_name = "example"
        account_url = "https://cs410032001efeadade.blob.core.windows.net"
        default_credential = DefaultAzureCredential()

        # Create the BlobServiceClient object
        blob_service_client = BlobServiceClient(account_url, credential=default_credential)

        upload_file_path = os.path.join(local_path, local_file_name)
        # Create a blob client using the local file name as the name for the blob
        blob_client = blob_service_client.get_blob_client(
            container=container_name, blob=upload_file_path)

        print("\nUploading to Azure Storage as blob:\n\t" + upload_file_path)

        # Upload the created file
        with open(file=upload_file_path, mode="rb") as data:
            blob_client.upload_blob(data)

    except Exception as ex:
        print('Exception:')
        print(ex)


def upload_to_s3(file_path, bucket_name, object_name):
    try:
        s3.upload_file(file_path, bucket_name, object_name)
        logging.info("Upload Successful")
        return True
    except Exception as e:
        logging.error(e)
        return False


def capture_process_logs_by_iterations():
    try:
        process_logs = subprocess.check_output(["top", "-b", "-n", "5"])
        with open("process.log", "wb") as f:
            f.write(process_logs)
        return True
    except Exception as e:
        logging.error(e)
        return False


def capture_network_sniffer_logs():
    try:
        network_sniffer_logs = subprocess.check_output(["tcpdump", "-c", "10"])
        with open("network_sniffer.log", "wb") as f:
            f.write(network_sniffer_logs)
        return True
    except Exception as e:
        logging.error(e)
        return False


def capture_process_logs(process_name):
    logs = subprocess.check_output(["ps", "-ef", "|", "grep", str(process_name), "|", "grep", "-v", "grep"], shell=True)
    return logs


def run_malware(malware_path):
    malware_process = subprocess.Popen(malware_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return malware_process


if __name__ == "__main__":
    blob_container_name = "example"
    local_path = "logs/"
    local_file_name = "process.log"
    malware_path = "./sample.sh"
    malware_process = run_malware(malware_path)
    while malware_process.poll() is None:

        # Save the process logs to a file or send to a remote server
        logging.info("Starting to capture process logs")
        if capture_process_logs_by_iterations():
            logging.info("Process logs captured successfully")
            upload_to_blob(local_path, local_file_name, blob_container_name)
        else:
            logging.error("Failed to capture process logs")

        logging.info("Starting to capture network sniffer logs")
        if capture_network_sniffer_logs():
            logging.info("Network sniffer logs captured successfully")
            # upload_to_s3("network_sniffer.log", s3_bucket_name, s3_object_name_network_sniffer)
            upload_to_blob(local_path, "network_sniffer.log", blob_container_name)
        else:
            logging.error("Failed to capture network sniffer logs")
        time.sleep(5)
