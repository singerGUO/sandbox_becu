#!/usr/bin/env python3
import boto3
import logging
import subprocess
import time
logger = logging.getLogger()
logger.setLevel(logging.INFO)

s3 = boto3.client("s3")

def upload_to_s3(file_path, bucket_name, object_name):
    try:
        s3.upload_file(file_path, bucket_name, object_name)
        logging.info("Upload Successful")
        return True
    except Exception as e:
        logging.error(e)
        return False

def capture_process_logs_by_iterations():
    try:
        process_logs = subprocess.check_output(["top", "-b", "-n", "5"])
        with open("process.log", "wb") as f:
            f.write(process_logs)
        return True
    except Exception as e:
        logging.error(e)
        return False

def capture_network_sniffer_logs():
    try:
        network_sniffer_logs = subprocess.check_output(["tcpdump", "-c", "10"])
        with open("network_sniffer.log", "wb") as f:
            f.write(network_sniffer_logs)
        return True
    except Exception as e:
        logging.error(e)
        return False

def capture_process_logs(process_name):
    logs = subprocess.check_output(["ps", "-ef", "|", "grep",str(process_name), "|", "grep", "-v", "grep"],shell= True)
    return logs

def run_malware(malware_path):
    malware_process = subprocess.Popen(malware_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return malware_process


if __name__ == "__main__":
    malware_path = "./sample.sh"
    malware_process = run_malware(malware_path)
    while malware_process.poll() is None:
        process_logs = capture_process_logs(malware_process.pid)
        logging.info(process_logs)
        # Save the process logs to a file or send to a remote server
        time.sleep(5) # Sle
